class HorizontalScroll{element;sensitivity;dragState;dragStartPos;dragMouseDownPos;dragMouseMovePos;constructor(t,e=1){if(this.sensitivity=e,!t)return console.warn("'element' not in DOM."),null;this.element=t,this.dragState=!1,this.dragStartPos=0,this.element.addEventListener("mousedown",(t=>this.interactDown(t))),this.element.addEventListener("mousemove",(t=>this.interactMove(t))),window.addEventListener("mouseup",(t=>this.interactUp(t))),this.element.addEventListener("touchstart",(t=>this.interactDown(t))),this.element.addEventListener("touchmove",(t=>this.interactMove(t))),window.addEventListener("touchend",(t=>this.interactUp(t))),this.element.addEventListener("wheel",(t=>{let e=t.deltaY>0?1:-1;this.slide(e,!1),e>0?this.dispatchEvent("wheeldown"):this.dispatchEvent("wheelup")}))}interactDown(t){this.dragState=!0,t instanceof MouseEvent&&(this.dragMouseDownPos=t.clientX),t instanceof TouchEvent&&(this.dragMouseDownPos=t.touches[0].clientX),this.dragStartPos=this.element.scrollLeft,this.dispatchEvent("held")}interactUp(t){this.dragState=!1,this.dispatchEvent("release")}interactMove(t){this.dragState&&(t instanceof MouseEvent&&(this.dragMouseMovePos=t.clientX),t instanceof TouchEvent&&(this.dragMouseMovePos=t.touches[0].clientX),t.type.includes("touch")||(this.element.scrollLeft=this.dragStartPos+this.dragMouseDownPos-this.dragMouseMovePos),this.dragMouseMovePos>this.dragMouseDownPos?this.dispatchEvent("scrollright"):this.dispatchEvent("scrollleft"))}async slide(t,e=!0){let s=e?1:this.sensitivity;if(0!==t){let e=this.element.children[0].clientWidth*t*s;this.element.scrollLeft+=e}else console.warn("'slide' must be a non-zero value.")}dispatchEvent(t){this.element.dispatchEvent(new CustomEvent("HorizontalScroll",{bubbles:!0,detail:{message:t}}))}}
